@using folderchat.Services.Mcp
@using Microsoft.JSInterop
@using System.Text.Json
@using System.Linq
@inject IJSRuntime JSRuntime

@if (isVisible)
{
    <div class="modal show d-block" tabindex="-1" role="dialog" style="background-color: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@Title</h5>
                    <button type="button" class="btn-close" @onclick="Close" aria-label="Close"></button>
                </div>
                <div class="modal-body" style="max-height: 60vh; overflow-y: auto;">
                    @if (tools.Count == 0)
                    {
                        <p class="text-muted">No tools available for this server.</p>
                    }
                    else
                    {
                        <p class="text-muted mb-3">Total: <strong>@tools.Count</strong> tools</p>
                        <div class="list-group">
                            @foreach (var tool in tools)
                            {
                                <div class="list-group-item">
                                    <h6 class="mb-1">@tool.Name</h6>
                                    <p class="mb-1 text-muted small">@tool.Description</p>
                                    @if (tool.InputSchema != null)
                                    {
                                        try
                                        {
                                            var schemaJson = JsonSerializer.Serialize(tool.InputSchema);
                                            var schemaDict = JsonSerializer.Deserialize<Dictionary<string, object>>(schemaJson);

                                            if (schemaDict != null)
                                            {
                                                // required 配列の取得
                                                var required = new List<string>();
                                                if (schemaDict.TryGetValue("required", out var reqObj) && reqObj != null)
                                                {
                                                    try
                                                    {
                                                        var reqJson = JsonSerializer.Serialize(reqObj);
                                                        required = JsonSerializer.Deserialize<List<string>>(reqJson) ?? new List<string>();
                                                    }
                                                    catch { }
                                                }

                                                // properties の取得
                                                if (schemaDict.TryGetValue("properties", out var propsObj) && propsObj != null)
                                                {
                                                    var propsJson = JsonSerializer.Serialize(propsObj);
                                                    var props = JsonSerializer.Deserialize<Dictionary<string, object>>(propsJson);

                                                    if (props != null && props.Count > 0)
                                                    {
                                                        var lines = new List<string>();

                                                        foreach (var kv in props)
                                                        {
                                                            var key = kv.Key;
                                                            string typeDisplay = "any";

                                                            try
                                                            {
                                                                var propSchemaJson = JsonSerializer.Serialize(kv.Value);
                                                                var propSchema = JsonSerializer.Deserialize<Dictionary<string, object>>(propSchemaJson);

                                                                if (propSchema != null && propSchema.TryGetValue("type", out var tObj) && tObj != null)
                                                                {
                                                                    var tJson = JsonSerializer.Serialize(tObj);
                                                                    try
                                                                    {
                                                                        var tList = JsonSerializer.Deserialize<List<string>>(tJson);
                                                                        if (tList != null && tList.Count > 0)
                                                                        {
                                                                            typeDisplay = string.Join("|", tList);
                                                                        }
                                                                        else
                                                                        {
                                                                            var tStr = JsonSerializer.Deserialize<string>(tJson);
                                                                            if (!string.IsNullOrWhiteSpace(tStr)) typeDisplay = tStr;
                                                                        }
                                                                    }
                                                                    catch
                                                                    {
                                                                        var tStr = JsonSerializer.Deserialize<string>(tJson);
                                                                        if (!string.IsNullOrWhiteSpace(tStr)) typeDisplay = tStr;
                                                                    }

                                                                    // array の items.type を見て型を詳細化
                                                                    if (string.Equals(typeDisplay, "array", StringComparison.OrdinalIgnoreCase))
                                                                    {
                                                                        try
                                                                        {
                                                                            if (propSchema.TryGetValue("items", out var itemsObj) && itemsObj != null)
                                                                            {
                                                                                var itemsJson = JsonSerializer.Serialize(itemsObj);
                                                                                var itemsDict = JsonSerializer.Deserialize<Dictionary<string, object>>(itemsJson);
                                                                                if (itemsDict != null && itemsDict.TryGetValue("type", out var itemsTypeObj) && itemsTypeObj != null)
                                                                                {
                                                                                    var itJson = JsonSerializer.Serialize(itemsTypeObj);
                                                                                    string itDisplay = "any";
                                                                                    try
                                                                                    {
                                                                                        var itList = JsonSerializer.Deserialize<List<string>>(itJson);
                                                                                        if (itList != null && itList.Count > 0) itDisplay = string.Join("|", itList);
                                                                                        else
                                                                                        {
                                                                                            var itStr = JsonSerializer.Deserialize<string>(itJson);
                                                                                            if (!string.IsNullOrWhiteSpace(itStr)) itDisplay = itStr;
                                                                                        }
                                                                                    }
                                                                                    catch
                                                                                    {
                                                                                        var itStr = JsonSerializer.Deserialize<string>(itJson);
                                                                                        if (!string.IsNullOrWhiteSpace(itStr)) itDisplay = itStr;
                                                                                    }
                                                                                    typeDisplay = $"array<{itDisplay}>";
                                                                                }
                                                                            }
                                                                        } catch { }
                                                                    }
                                                                }
                                                            }
                                                            catch { }

                                                            var requiredMark = required.Contains(key) ? " (required)" : "";
                                                            lines.Add($"{key}: {typeDisplay}{requiredMark}");
                                                        }

                                                        <div class="mb-0 text-muted small">
                                                            <strong>Parameters:</strong>
                                                            <ul class="mb-0">
                                                                @foreach (var line in lines)
                                                                {
                                                                    <li>@line</li>
                                                                }
                                                            </ul>
                                                        </div>
                                                    }
                                                }
                                            }
                                        }
                                        catch
                                        {
                                            // Ignore schema parsing errors
                                        }
                                    }
                                </div>
                            }
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="Close">Close</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private bool isVisible = false;
    private string Title { get; set; } = "MCP Tools";
    private List<Tool> tools = new List<Tool>();

    public async Task ShowAsync(string serverName, List<Tool> serverTools)
    {
        Title = $"{serverName} - Tools";
        tools = (serverTools ?? new List<Tool>())
            .OrderBy(t => t?.Name ?? string.Empty, StringComparer.OrdinalIgnoreCase)
            .ToList();
        isVisible = true;
        StateHasChanged();

        // Focus the dialog for accessibility
        await Task.Delay(100);
        await JSRuntime.InvokeVoidAsync("eval", "document.querySelector('.modal-dialog')?.focus();");
    }

    private void Close()
    {
        isVisible = false;
        StateHasChanged();
    }
}
